"use client";

import {
  getTotalTime,
  getUserByEmail,
  postLogTime,
} from "@/utils/userApi/page";
import Link from "next/link";
import styles from "../Profile.module.css";
import { getSessionByUser } from "@/utils/sessionApi/drivingSessionApi";
import { useEffect, useState } from "react";
import { CONFIG_FILES } from "next/dist/shared/lib/constants";

const Profile = ({ params }) => {
  const [userData, setUserData] = useState(null);
  const [userSessions, setUserSessions] = useState([]);
  const [totalTime, setTotalTime] = useState(0);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const result = await getUserByEmail(params.email);
        const dataUser = result.data;
        setUserData(dataUser);

        const sessionResult = await getSessionByUser(dataUser.id);
        if (sessionResult.success) {
          setUserSessions(sessionResult.data);
        } else {
          console.error("Failed to fetch sessions:", sessionResult.message);
        }
      } catch (error) {
        console.error("Error fetching data:", error);
      }
    };
    const getToalTimeOfUser = async () => {
      try {
        const result = await getTotalTime(userData.id);
        console.log("vikram", result);
        const totalGetTime = result.data;
        setTotalTime(totalGetTime);
      } catch (error) {
        console.error("Error getting Totalime data:", error);
      }
    };
    getToalTimeOfUser();

    fetchData();
  }, [params.email]);
  const submitLogTIme = async (e) => {
    e.preventDefault();

    // post log time
    console.log(userData);
    const time = 1;

    const response = await postLogTime(userData.id, 1);
    const getToalTimeOfUser = async () => {
      try {
        const result = await getTotalTime(userData.id);
        console.log("vikram", result);
        const totalGetTime = result.data;
        setTotalTime(totalGetTime);
      } catch (error) {
        console.error("Error getting Totalime data:", error);
      }
    };
    getToalTimeOfUser();
  };
  const handleLogout = (e) => {
    e.preventDefault();
    alert("logout");
  };
  function getLocalDate() {
    const now = new Date();
    const year = now.getFullYear();
    const month = (now.getMonth() + 1).toString().padStart(2, "0"); // Months are zero-indexed
    const day = now.getDate().toString().padStart(2, "0");

    return `${year}-${month}-${day}`;
  }

  const currentDate = getLocalDate();
  console.log(userData);
  console.log(currentDate);

  if (!userData) {
    return <div className={styles.container}>Loading...</div>;
  }

  return (
    <div className={styles.container}>
      <div className={styles.topRight}>
        <div className={styles.userEmail}>{userData.email}</div>
      </div>
      <div className="flex">
      <div>
      <h1 className={styles.header}>User Details</h1>
      <div className={styles.details}>
        <h2>
          Name: <span>{userData.name}</span>
        </h2>
        <h2>
          Email: <span>{userData.email}</span>
        </h2>
        <h2>
          Aadhaar Number:{" "}
          <span>{userData.aadhaarNumber || "Not Provided"}</span>
        </h2>
        <h2>
          Role: <span>{userData.role}</span>
        </h2>
        <h2>
          Status: <span>{userData.status}</span>
        </h2>

        <h2>Total Trainging Time - {userData.totalHours}</h2>

        {userData.availability.length !== 0 &&
        userData.availability.some((d) => d.sessionDate == currentDate) ? (
          <div>
            <h2>Is traing done?</h2>
            <button
              className="p-2 bg-blue-600 border border-black "
              onClick={submitLogTIme}
            >
              Done
            </button>
          </div>
        ) : (
          <h2>no available session date</h2>
        )}
        <h2>Instructors:</h2>
        <ul>
          {userData.instructors && userData.instructors.length > 0 ? (
            userData.instructors.map((instructor) => (
              <li key={instructor.id}>
                {instructor.name} ({instructor.email})
              </li>
            ))
          ) : (
            <li>No Instructor Assigned</li>
          )}
        </ul>
      </div>
      </div>
      <div>
        <h2>Traing done</h2>
      </div>
      </div>
      {userSessions.length > 0 && (
        <div className={styles.sessionDetails}>
          <h2>Session Details</h2>
          {userSessions.map((session) => (
            <div key={session.id} className={styles.singleSession}>
              {session.instructor && (
                <>
                  <h3>
                    Instructor Name:{" "}
                    <span>{session.instructor?.name || "Not Assigned"}</span>
                  </h3>
                  <h3>
                    Instructor Email:{" "}
                    <span>{session.instructor?.email || "Not Assigned"}</span>
                  </h3>
                </>
              )}
              <h3>
                Session Date: <span>{session.availability[0].sessionDate}</span>
              </h3>
              <h3>
                Schedule Date:{" "}
                <span>{session.availability[0].scheduleDate}</span>
              </h3>
              <h3>Availability:</h3>
              <ul>
                {session.availability.map((avail) => (
                  <li key={avail.sessionDate}>
                    {avail.day} ({avail.sessionDate}) ({avail.startTime}) - (
                    {avail.endTime})
                  </li>
                ))}
              </ul>
              <h3>
                Status: <span>{session.status}</span>
              </h3>
            </div>
          ))}
        </div>
      )}
      {userSessions.length === 0 && (
        <h4 className={styles.sessionsLink}>
          Get user sessions:{" "}
          <Link href={`/user/session/${userData.id}`}>My Sessions</Link>
        </h4>
      )}
      <h4 className={styles.sessionsLink}>
        Update: <Link href={`/user/update/${userData.id}`}>Update</Link>
      </h4>
      <Link href={"/user"}>
        <button
          className="p-2 bg-red-600 border border-black"
         
        >
          Logout
        </button>
      </Link>
    </div>
  );
};

export default Profile;
